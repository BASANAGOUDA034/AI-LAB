from collections import defaultdict

class Graph:

          def __init__(self,n):
                  self.g = defaultdict(list)
                  self.n = n

          def add_edge(self,u,v):
                  self.g[u],append(v)
 
          def dls(self,src,target,maxDepth):
                  if src==target:
                          return True
                  if maxDepth<0:
                          return False


                  for i in self.g[src]:
                         if self.dls(i,target,maxDepth-1):
                              return True
                  return False

          def iddfs(self,src,target,maxDepth):
                 for i in range(maxDepth):   
                  if self.dls(src,target,i):
                            return True
                 return False             
def call(target,maxDepth):
       graph = Graph(10)
       graph.add_edge(0,1)
       graph.add_edge(0,2)
       graph.add_edge(0,3)
       graph.add_edge(1,4)
       graph.add_edge(2,5)
       graph.add_edge(2,6)
       graph.add_edge(3,7)
       graph.add_edge(4,8)
       graph.add_edge(6,9)
       
       if graph.iddfs(0,target,maxDepth):
             print("Node can be reached within maxDepth.")
       else:
             print("Node cannot be reached within maxDepth.")
